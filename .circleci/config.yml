version: 2.1
parameters:
  cluster-name:
    type: string
    default: "dev"
  helm-version:
    type: string
    default: "v3.3.1"
  namespace:
    type: string
    default: "spacerace"
orbs:
  slack: circleci/slack@3.4.2
  eks: circleci/aws-eks@1.0.0
  helm: circleci/helm@1.0.0
jobs:
  install-helm-chart:
    executor: aws-eks/python
    steps: 
      - eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
          install-kubectl: true
      - helm/install-helm-client:
          version: << pipeline.parameters.helm-version >>
      - checkout
      - run:
          name: install-helm-chart
          command: |
            export RELEASE="$(cat /dev/urandom | tr -dc 'a-z0-9' | fold -w 5 | head -n 1)"
            echo "Release=${RELEASE}" | tee /tmp/release
            helm install --wait $RELEASE . -n << pipeline.parameters.namespace >> -f values-<< pipeline.parameters.namespace >>.yaml -f values/<< pipeline.parameters.cluster-name >>/<< pipeline.parameters.namespace >>/test.yaml
      - persist_to_workspace:
          root: /tmp
          paths:
            - release
  test-1-is-up:
    executor: aws-eks/python
    steps:
      - attach_workspace:
          at: /tmp/releases/ 
      - eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
          install-kubectl: true
      - helm/install-helm-client:
          version: << pipeline.parameters.helm-version >>
      - checkout
      - run:
          name: install-test
          command: |
            export RELEASE="$(cat /tmp/releases/release)"
            echo "Release=${RELEASE}"
            helm template $RELEASE tests/is-up -n << pipeline.parameters.namespace >> -f values-<< pipeline.parameters.namespace >>.yaml -f values/<< pipeline.parameters.cluster-name >>/<< pipeline.parameters.namespace >>/test.yaml | kubectl apply -f -
      - run:
          name: verify-test
          command: |
            while true; do
            export $STATUS=$(kubectl get pods ${RELEASE}-is-up --no-headers -o custom-columns=":status.phase" -n << pipeline.parameters.namespace >>)
            echo "STATUS IS => $STATUS"
            if [ "$STATUS" -eq "Running" ]; then
              sleep 2s
            else
              if [ "$STATUS" -eq "Succeeded"; then
                break
              else
                false
                break
              fi
            fi
            done
      - run:
          name: delete-test
          command: helm template $RELEASE tests/is-up -n << pipeline.parameters.namespace >> -f values-<< pipeline.parameters.namespace >>.yaml -f values/<< pipeline.parameters.cluster-name >>/<< pipeline.parameters.namespace >>/test.yaml | kubectl delete -f -
  delete-helm-chart:
    executor: aws-eks/python
    steps: 
      - attach_workspace:
          at: /tmp/releases/
      - eks/update-kubeconfig-with-authenticator:
          cluster-name: << pipeline.parameters.cluster-name >>
          install-kubectl: true
      - helm/install-helm-client:
          version: << pipeline.parameters.helm-version >>
      - checkout
      - run:
          name: delete-helm-chart
          command: |
            export RELEASE="$(cat /tmp/releases/release)"
            echo "Release=${RELEASE}" 
            helm delete $RELEASE . -n << pipeline.parameters.namespace >> 
workflows:
  tests:
    steps: 
      - install-helm-chart:
          filters:
            tags:
              only: /^build.*/
            branches:
              only: dev
      - test-1-is-up:
          requires:
            - install-helm-chart
      - test-2-internally-available:
          requires:
            - install-helm-chart
      - test-3-externally-available:
          requires:
            - install-helm-chart
      - delete-helm-chart-approval:
          type: approval
          requires:
            - install-helm-chart
      - delete-helm-chart:
          requires:
            - delete-helm-chart-approval 
