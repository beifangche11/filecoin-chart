apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-lotus
  labels:
    app: lotus-node-app
spec:
  replicas: {{ .Values.replicaCount }}
{{- if .Values.Lotus.service.slave }}
  serviceName: {{ .Values.Lotus.service.release }}-lotus-service
{{- else }}
  serviceName: {{ .Release.Name }}-lotus-service
{{- end }}
  selector:
    matchLabels:
      app: lotus-node-app
      chart: {{ .Chart.Name }}-{{ .Chart.Version }}
      heritage: {{ .Release.Service }}
{{- if .Values.Lotus.service.slave }}
      release: {{ .Values.Lotus.service.release }}
      release-fork: {{ .Release.Name }}
{{- else }}
      release: {{ .Release.Name }}
{{- end }}
  template:
    metadata:
      labels:
        app: lotus-node-app
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        heritage: {{ .Release.Service }}
{{- if .Values.Lotus.service.slave }}
        release: {{ .Values.Lotus.service.release }}
        release-fork: {{ .Release.Name }}
{{- else }}
        release: {{ .Release.Name }}
{{- end }}
    spec:
{{- if .Values.SecurityContext.runAsNonRoot }}
      securityContext:
        runAsGroup: {{ .Values.SecurityContext.runAsGroup }}
        runAsUser: {{ .Values.SecurityContext.runAsUser }}
        fsGroup: {{ .Values.SecurityContext.fsGroup }}
{{- end }}
      volumes:
{{- if .Values.Powergate.enabled }}
        - name: powergate-secret-vol
          secret:
            secretName: {{ .Release.Name }}-lotus-secret
            defaultMode: 384 # permission 0600
            items:
            - key: token
              path: token
{{- if and (not .Values.persistence.enabled) .Values.persistence.hostPath }}
        - name: vol-powergate
          hostPath:
            path: {{ .Values.persistence.hostPath }}/powergate
            type: DirectoryOrCreate
{{- end }}
{{- end }}
{{- if and .Values.IPFS.enabled (not .Values.persistence.enabled) .Values.persistence.hostPath }}
        - name: vol-ipfs
          hostPath:
            path: {{ .Values.persistence.hostPath }}/ipfs
            type: DirectoryOrCreate
{{- end }}
{{- if .Values.Lotus.enabled }}
{{- if .Values.secretVolume.enabled }}
        - name: lotus-secret-vol
          secret:
            secretName: {{ .Release.Name }}-lotus-secret
            defaultMode: 384 # permission 0600
{{- end }}
{{- if and (not .Values.persistence.enabled) .Values.persistence.hostPath }}
        - name: vol-lotus
          hostPath:
            path: {{ .Values.persistence.hostPath }}/lotus
            type: DirectoryOrCreate
{{- end }}
      initContainers:
{{- if and (not .Values.persistence.enabled) .Values.persistence.hostPath }}
      - name: hostpath-permission
        image: busybox
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/sh","-c"]
        args:
          - chown -R 2000:2000 /tmp;
        securityContext:
          runAsUser: 0
        volumeMounts:
          - name: vol-lotus
            mountPath: /tmp
{{- end }}
{{- if .Values.secretVolume.enabled }}
      - name: keys-management
        image: busybox
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/sh","-c"]
        args: 
          - mkdir -p /home/lotus_user/.lotus/keystore;
{{- if .Values.secretVolume.persistNodeID }} 
            cp /keystore/nodeid /home/lotus_user/.lotus/keystore/NRUWE4BSOAWWQ33TOQ;
{{- else }}
            rm -f /home/lotus_user/.lotus/keystore/NRUWE4BSOAWWQ33TOQ;
{{- end }}           
            cp /keystore/token /home/lotus_user/.lotus/token;
            cp /keystore/privatekey /home/lotus_user/.lotus/keystore/MF2XI2BNNJ3XILLQOJUXMYLUMU;
        volumeMounts:
          - name: vol-lotus
            mountPath: /home/lotus_user/.lotus
          - name: lotus-secret-vol
            mountPath: /keystore            
{{- end }}
{{- if .Values.init.import.enabled }}
      - name: import-start
        image: {{ .Values.image.repository }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/sh", "-c"]
        args: ["until [ -f /chain/chain.car ] && [ ! -f /chain/chain.car.lock ]; do echo "Waiting for snapshot files to appear before import; Sleeping 60s"; sleep 60s; done && /bin/entrypoint -i"]
        volumeMounts:
          - name: vol-lotus
            mountPath: /home/lotus_user/.lotus
          - name: {{ (index .Values.init.import.volume 0).name }}
            mountPath: /chain
{{- end }}
{{- if .Values.init.importSnapshot.enabled }}
      - name: import-snapshot
        image: {{ .Values.image.repository }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - /bin/entrypoint
{{- if .Values.init.importSnapshot.SNAPSHOTURL }}
          - -n
{{- else }}
          - -f
{{- end }}
        volumeMounts:
          - name: vol-lotus
            mountPath: /home/lotus_user/.lotus
        env:
{{- if .Values.init.importSnapshot.SNAPSHOTURL }}
        - name: SNAPSHOTURL
          value: {{ .Values.init.importSnapshot.SNAPSHOTURL }}
{{- else }}
        - name: SNAPSHOT_CID
          value: {{ .Values.init.importSnapshot.SNAPSHOT_CID }}
        - name: IPFS_GW
          value: {{ .Values.init.importSnapshot.IPFS_GW }} 
{{- end }}
{{- end }}
{{- if .Values.init.sync.enabled }}
      - name: sync-wait
        image: {{ .Values.image.repository }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/entrypoint","-s"]
        volumeMounts:
          - name: vol-lotus
            mountPath: /home/lotus_user/.lotus
                    
{{- end }}
{{- end }}
      containers:
{{- if .Values.Powergate.enabled }}
      - name: {{ .Chart.Name }}-powergate
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        image: textile/powergate
        livenessProbe:
          httpGet:
            path: /{{ .Release.Name }}/powergate/7000
            port: 7000
          initialDelaySeconds: 150
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 6
        ports:
        - containerPort: 8889
        - containerPort: 7000
        - containerPort: 6060
        - containerPort: 5002
        - containerPort: 6002
        env:
{{- if .Values.lotusDNS }}
        - name: POWD_LOTUSHOST
          value: "/dns4/{{ .Values.lotusDNS }}/tcp/1234"
        - name: POWD_IPFSAPIADDR
          value: "/dns4/{{ .Values.lotusDNS }}/tcp/5001"
{{- else }}
        - name: POWD_LOTUSHOST
          value: "/ip4/127.0.0.1/tcp/1234"
        - name: POWD_IPFSAPIADDR
          value: "/ip4/127.0.0.1/tcp/5001"
{{- end }}
        - name: POWD_LOTUSTOKENFILE
          value: "/home/lotus_user/powergate/secret/token"
        - name: POWD_REPOPATH
          value: "/home/lotus_user/powergate/.powergate"
        - name: POWD_GATEWAYBASEPATH
          value: "/{{ .Release.Name }}/powergate/7000"
        volumeMounts:
          - name: vol-powergate
            mountPath: /home/lotus_user/powergate
          - name: vol-lotus
            mountPath: /home/lotus_user/.lotus
          - name: powergate-secret-vol
            mountPath: /home/lotus_user/powergate/secret
        resources:
{{ toYaml .Values.resources.powergate | indent 10 }}
{{- end }}
{{- if .Values.StateDiff.enabled }}
      - name: {{ .Chart.Name }}-statediff
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        image: filecoin/stateexplorer:latest
        args:
          - explore
          - --bind
          - 0.0.0.0:33333
          - --api
{{- if .Values.lotusDNS }}
          - :/dns4/{{ .Values.lotusDNS }}/tcp/1234/http
{{- else }}
          - :/ip4/127.0.0.1/tcp/1234/http
{{- end }}
        livenessProbe:
          httpGet:
            path: /
            port: 33333
          initialDelaySeconds: 200
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 6
        ports:
        - containerPort: 33333
          name: rpc
        resources:
{{ toYaml .Values.resources.statediff | indent 10 }}
{{- end }}
{{- if .Values.IPFS.enabled }}
      - name: {{ .Chart.Name }}-ipfs
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        image: ipfs/go-ipfs
        livenessProbe:
          httpGet:
            path: /webui
            port: 5001
          initialDelaySeconds: 200
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 6
        securityContext:
          runAsUser: 0
        ports:
        - containerPort: 4001
        - containerPort: 5001
        - containerPort: 8080
          name: rpc
        volumeMounts:
          - name: vol-ipfs
            mountPath: /data/ipfs
        resources:
{{ toYaml .Values.resources.ipfs | indent 10 }}
{{- end }}
{{- if .Values.Lotus.enabled }}
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.repository }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command: ["/bin/entrypoint","-d"]
        env:
{{- if .Values.healthcheck.enabled }}
        - name: NETWORK
          value: "{{ .Values.healthcheck.network }}"
{{- if .Values.healthcheck.allowedDelay }}
        - name: ALLOWED_DELAY
          value: "{{ .Values.healthcheck.allowedDelay }}"
{{- end }}
{{- end }}
{{- if .Values.IPFS.enabled }}
        - name: LOTUS_CLIENT_USEIPFS
          value: "true"
        - name: LOTUS_CLIENT_IPFSUSEFORRETRIEVAL
          value: "true"
{{- if .Values.ipfsDNS }} 
        - name: LOTUS_CLIENT_IPFSMADDR
          value: "/dns4/{{ .Values.ipfsDNS }}/tcp/5001"
{{- else }}
        - name: LOTUS_CLIENT_IPFSMADDR
          value: "/ip4/127.0.0.1/tcp/5001"
{{- end }}
{{- end }}
{{- if and .Values.IPFS.enabled (eq .Values.persistence.snapshots.uploadToIpfs.export "cold") }}
        - name: SHEDEXPORT
          value: "true"
        - name: SHEDEXPORTPATH
          value: "/data/ipfs/lotus-new.car"
        - name: SHEDEXPORTPERIOD
          value: "{{ .Values.persistence.snapshots.uploadToIpfs.shedPeriod }}"
{{- end }}
{{- if ne .Values.persistence.snapshots.uploadToIpfs.export "cold" }}
        livenessProbe:
  {{- if .Values.healthcheck.enabled }}
          exec:
            command:
              - /bin/bash
              - -c
              - /bin/healthcheck
          initialDelaySeconds: 150
          periodSeconds: 120
          successThreshold: 1
          timeoutSeconds: 30
  {{- else }}
          httpGet:
            path: /debug/metrics
            port: api
          initialDelaySeconds: 200
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 6
  {{- end }}
{{- end }}
        readinessProbe:
          httpGet:
            path: /debug/metrics
            port: api
          initialDelaySeconds: 200
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        ports:
        - containerPort: 1234
          name: api
        - containerPort: 1235
          name: p2p
        volumeMounts:
          - name: vol-lotus
            mountPath: /home/lotus_user/.lotus
        {{- if and (.Values.init.import.volume) (.Values.init.import.enabled) }}
          - name: {{ (index .Values.init.import.volume 0).name }}
            mountPath: /chain
        {{- end }}
{{- if and .Values.IPFS.enabled .Values.persistence.snapshots.uploadToIpfs.enabled }}
          - name: vol-ipfs
            mountPath: /data/ipfs
{{- end }}
        resources:
{{ toYaml .Values.resources.lotus | indent 10 }}
{{- end }}
{{- if .Values.nodeSelector.enabled }}
      nodeSelector:
{{ toYaml .Values.nodeSelector.nodeLabel | indent 8 }}
{{- end }}
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
{{- if .Values.Lotus.enabled }}          
    - metadata:
        name: vol-lotus
      spec:
        accessModes:
            {{- range .Values.persistence.lotus.accessModes }}
            - {{ . | quote }}
            {{- end }}
        resources:
            requests:
                storage: {{ .Values.persistence.lotus.size | quote }}
        {{- if not .Values.persistence.lotus.storageClassName }}
        {{- if .Values.persistence.snapshots.enabled }}
        storageClassName: "ebs-sc"
        {{- else }}
        storageClassName: ""
        {{- end }}
        {{- else }}
        storageClassName: "{{ .Values.persistence.lotus.storageClassName }}"
        {{- end }}
        {{- if .Values.persistence.snapshots.restore.enabled }}
        dataSource:
          name: {{ .Values.persistence.snapshots.restore.name }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
{{- end }}        
{{- if .Values.IPFS.enabled }}
    - metadata:
        name: vol-ipfs
        {{- range $key, $value := .Values.persistence.ipfs.annotations }}
            {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
            {{- range .Values.persistence.ipfs.accessModes }}
            - {{ . | quote }}
            {{- end }}
        resources:
            requests:
                storage: {{ .Values.persistence.ipfs.size | quote }}
        {{- if not .Values.persistence.ipfs.storageClassName }}
        {{- if .Values.persistence.snapshots.enabled }}
        storageClassName: "ebs-sc"
        {{- else }}
        storageClassName: ""
        {{- end }}
        {{- else }}
        storageClassName: "{{ .Values.persistence.ipfs.storageClassName }}"
        {{- end }}
{{- end }}
{{- if .Values.Powergate.enabled }}
    - metadata:
        name: vol-powergate
        {{- range $key, $value := .Values.persistence.powergate.annotations }}
            {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
            {{- range .Values.persistence.powergate.accessModes }}
            - {{ . | quote }}
            {{- end }}
        resources:
            requests:
                storage: {{ .Values.persistence.powergate.size | quote }}
        {{- if not .Values.persistence.powergate.storageClassName }}
            {{- if .Values.persistence.snapshots.enabled }}
        storageClassName: "ebs-sc"
            {{- else }}
        storageClassName: ""
            {{- end }}
          {{- else }}
        storageClassName: "{{ .Values.persistence.powergate.storageClassName }}"
        {{- end }}
{{- end }}
{{- end }}
