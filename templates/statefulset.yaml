apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-lotus 
  labels:
    app: lotus-node-app
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ .Release.Name }}-lotus-service
  selector:
    matchLabels:
      app: lotus-node-app
  template:
    metadata:
      labels:
        app: lotus-node-app
        chart: {{ .Chart.Name }}-{{ .Chart.Version }}
        heritage: {{ .Release.Service }}
        release: {{ .Release.Name }}
    spec:
{{- if .Values.securityContext.runAsNonRoot }}
      securityContext:
        # The image runs as uid 1000 by default, and needs to be able to write to
        # the persistent volume to be able to start.
        fsGroup: {{ .podSecurityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
{{- end }}
      volumes:
{{- if .Values.secretVolume.enabled }}
        - name: lotus-secret-vol
          secret:
            secretName: {{ .Release.Name }}-lotus-secret
            defaultMode: 384 # permission 0600
{{- end }}
      initContainers:
{{- if .Values.secretVolume.enabled }}
      - name: api-keys
        image: busybox
        command: ["/bin/sh","-c"]
        args: ["mkdir -p /lotus/keystore; cp /secret/privatekey /lotus/keystore/MF2XI2BNNJ3XILLQOJUXMYLUMU; cp /secret/token /lotus/token"]
        volumeMounts:
          - name: lotus-secret-vol
            mountPath: "/secret"
          - name: vol-lotus
            mountPath: /lotus
{{- end }}
{{- if .Values.init.import.enabled }}
      - name: import-wait
        image: debian:stable
        command: ["/bin/sh","-c"]
        args: ["until [ -f /chain/chain.car ] && [ ! -f /chain/chain.car.lock ]; do sleep 5; done"]
        volumeMounts:
          - name: {{ (index .Values.init.import.volume 0).name }}
            mountPath: /chain
{{- end }}
{{- if .Values.init.import.enabled }}
      - name: import-start
        image: {{ .Values.image.repository }}
        command: ["/bin/entrypoint","-i"]
        volumeMounts:
          - name: vol-lotus
            mountPath: /root/.lotus
          - name: {{ (index .Values.init.import.volume 0).name }}
            mountPath: /chain
{{- end }}
{{- if .Values.init.sync.enabled }}
      - name: sync-wait
        image: {{ .Values.image.repository }}
        command: ["/bin/entrypoint","-s"]
        volumeMounts:
          - name: vol-lotus
            mountPath: /root/.lotus
{{- end }}
      containers:
{{- if .Values.Powergate.enabled }}
      - name: {{ .Chart.Name }}-powergate
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        image: textile/powergate
        livenessProbe:
          httpGet:
            port: 7000
          initialDelaySeconds: 150
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 6
        ports:
        - containerPort: 8889
        - containerPort: 7000
        - containerPort: 6060
        - containerPort: 5002
        - containerPort: 6002
        env:
        - name: POWD_LOTUSHOST
          value: "/dns4/127.0.0.1/tcp/1234"
        - name: POWD_IPFSAPIADDR
          value: "/dns4/127.0.0.1/tcp/5001"
        - name: POWD_LOTUSTOKENFILE
          value: "/root/.lotus/token"
        - name: POWD_REPOPATH
          value: "/root/powergate/.powergate"
        - name: POWD_GATEWAYBASEPATH
          value: "/{{ .Release.Name }}/powergate/7000/"
        volumeMounts:
          - name: vol-powergate
            mountPath: /root/powergate
          - name: vol-lotus
            mountPath: /root/.lotus
        resources:
{{ toYaml .Values.resources.powergate | indent 10 }}
{{- end }}
{{- if .Values.IPFS.enabled }}
      - name: {{ .Chart.Name }}-ipfs
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        image: ipfs/go-ipfs
        livenessProbe:
          httpGet:
            path: /webui
            port: 5001
          initialDelaySeconds: 200
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 6
        ports:
        - containerPort: 4001
        - containerPort: 5001
        - containerPort: 8080
          name: rpc
        volumeMounts:
          - name: vol-ipfs
            mountPath: /data/ipfs
        resources:
{{ toYaml .Values.resources.ipfs | indent 10 }}
{{- end }}
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.repository }}
        command: ["/bin/entrypoint","-d"]
        imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.IPFS.enabled }}
        env:
        - name: LOTUS_CLIENT_USEIPFS
          value: "true"
        - name: LOTUS_CLIENT_IPFSUSEFORRETRIEVAL
          value: "true"
        - name: LOTUS_CLIENT_IPFSMADDR
          value: "/dns4/127.0.0.1/tcp/5001"
{{- end }}
        livenessProbe:
          httpGet:
            path: /debug/metrics
            port: api
          initialDelaySeconds: 150
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 6
        readinessProbe:
          httpGet:
            path: /debug/metrics
            port: api
          initialDelaySeconds: 200
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 3
        ports:
        - containerPort: 1234
          name: api
        - containerPort: 1235
          name: p2p
        volumeMounts:
          - name: vol-lotus
            mountPath: /root/.lotus
        {{- if and (.Values.init.import.volume) (.Values.init.import.enabled) }}
          - name: {{ (index .Values.init.import.volume 0).name }}
            mountPath: /chain
        {{- end }}
{{- if and .Values.IPFS.enabled .Values.persistence.snapshots.uploadToIpfs.enabled }}
          - name: vol-ipfs
            mountPath: /data/ipfs
{{- end }}
        resources:
{{ toYaml .Values.resources.lotus | indent 10 }}
{{- if .Values.nodeSelector.enabled }}
      nodeSelector:
{{ toYaml .Values.nodeSelector.nodeLabel | indent 8 }}
{{- end }}
  {{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: vol-lotus
        {{- range $key, $value := .Values.persistence.lotus.annotations }}
            {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
            {{- range .Values.persistence.lotus.accessModes }}
            - {{ . | quote }}
            {{- end }}
        resources:
            requests:
                storage: {{ .Values.persistence.lotus.size | quote }}
        {{- if not .Values.persistence.lotus.storageClassName }}
        {{- if .Values.persistence.snapshots.enabled }}
        storageClassName: "ebs-sc"
        {{- else }}
        storageClassName: ""
        {{- end }}
        {{- else }}
        storageClassName: "{{ .Values.persistence.lotus.storageClassName }}"
        {{- end }}
        {{- if .Values.persistence.snapshots.restore.enabled }}
        dataSource:
          name: {{ .Values.persistence.snapshots.restore.name }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
        {{- end }}
{{- if .Values.IPFS.enabled }}
    - metadata:
        name: vol-ipfs
        {{- range $key, $value := .Values.persistence.ipfs.annotations }}
            {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
            {{- range .Values.persistence.ipfs.accessModes }}
            - {{ . | quote }}
            {{- end }}
        resources:
            requests:
                storage: {{ .Values.persistence.ipfs.size | quote }}
        {{- if not .Values.persistence.ipfs.storageClassName }}
        {{- if .Values.persistence.snapshots.enabled }}
        storageClassName: "ebs-sc"
        {{- else }}
        storageClassName: ""
        {{- end }}
        {{- else }}
        storageClassName: "{{ .Values.persistence.ipfs.storageClassName }}"
        {{- end }}
{{- end }}
{{- if .Values.Powergate.enabled }}
    - metadata:
        name: vol-powergate
        {{- range $key, $value := .Values.persistence.powergate.annotations }}
            {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
            {{- range .Values.persistence.powergate.accessModes }}
            - {{ . | quote }}
            {{- end }}
        resources:
            requests:
                storage: {{ .Values.persistence.powergate.size | quote }}
        {{- if not .Values.persistence.powergate.storageClassName }}
            {{- if .Values.persistence.snapshots.enabled }}
        storageClassName: "ebs-sc"
            {{- else }}
        storageClassName: ""
            {{- end }}
          {{- else }}
        storageClassName: "{{ .Values.persistence.powergate.storageClassName }}"
        {{- end }}
{{- end }}
{{- end }}
